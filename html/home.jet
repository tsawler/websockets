<!doctype html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport"
          content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">

    <link rel="stylesheet" type="text/css" href="https://unpkg.com/notie/dist/notie.min.css">

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/css/bootstrap.min.css" rel="stylesheet"
          integrity="sha384-giJF6kkoqNQ00vy+HMDP7azOuL0xtbfIcaT9wjKHr8RbDVddVHyTfAAsrekwKmP1" crossorigin="anonymous">

    <link rel="apple-touch-icon" sizes="180x180" href="/static/apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="/static/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="/static/favicon-16x16.png">
    <link rel="manifest" href="/static/site.webmanifest">

    <style>
        .chatBox {
            padding: 0.5em;
            outline: 1px solid silver;
            min-height: 150px;
        }
    </style>
    <title>Home</title>
</head>
<body>
<div class="container">
    <div class="row">
        <div class="col-md-8">
            <h1 class="mt-3">Home page</h1>
            <hr>

            <p>
                <a href="https://www.github.com">Go to Github</a>
            </p>

            <div class="form-group">
                <label for="username">Username:</label>
                <input class="form-control" type="text" name="username" id="username" autocomplete="off">
            </div>

            <div class="form-group mt-2">
                <label for="message">Message:</label>
                <input class="form-control" type="text" name="message" id="message" autocomplete="off">
            </div>
            <hr>
            <a href="javascript:void(0);" id="sendBtn" class="btn btn-outline-secondary">Send message</a>

            <div id="status" class="mt-2 float-end">

            </div>

            <div class="clearfix"></div>

            <div id="output" class="chatBox mt-2">

            </div>
        </div>
        <div class="col-md-4">
            <h1 class="mt-3">Who's Online</h1>
            <hr>
            <ul id="online_users">

            </ul>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-ygbV9kiqUc6oa4msXn9868pTtWMgiQaeYH7/t7LECLbyPA2x65Kgf80OJFdroafW"
        crossorigin="anonymous"></script>

<script src="https://unpkg.com/notie"></script>
<script src="/static/reconnecting-websocket.min.js"></script>

<script>

    let socket = null;
    let o = document.getElementById("output")

    window.onbeforeunload = function(){
        console.log("leaving");
        let jsonData = {};
        jsonData["action"] = "left";
        socket.send(JSON.stringify(jsonData));
    };

    document.addEventListener("DOMContentLoaded", function () {

        socket = new ReconnectingWebSocket("ws://127.0.0.1:8080/ws", null, {debug: true, reconnectInterval: 3000});

        document.getElementById("sendBtn").addEventListener("click", function () {
            if (!socket) {
                console.log("no connection");
                return false;
            }
            sendMessage()
        })

        document.getElementById("message").addEventListener("keydown", function (event) {
            if (event.code === "Enter") {
                if (!socket) {
                    console.log("no connection");
                    return false;
                }
                event.preventDefault();
                event.stopPropagation();
                sendMessage();
            }
        })

        document.getElementById("username").addEventListener("change", function () {
            let jsonData = {};
            jsonData["action"] = "username";
            jsonData["username"] = this.value;
            socket.send(JSON.stringify(jsonData));
        })

        const offline = `<span class="badge bg-danger">Not connected</span>`;
        const online = `<span class="badge bg-success">Connected</span>`;
        let statusDiv = document.getElementById("status");

        socket.onopen = () => {
            console.log("Successfully Connected");
            statusDiv.innerHTML = online;
            let jsonData = {};
            jsonData["action"] = "entered";
            socket.send(JSON.stringify(jsonData));

            jsonData["action"] = "who";
            socket.send(JSON.stringify(jsonData));
        };

        socket.onclose = event => {
            socket.send("Client Closed!");
            statusDiv.innerHTML = offline;
        };

        socket.onerror = error => {
            o.innerHTML = o.innerHTML + `<small class="text-danger"><em>Disconnected from server!</em></small><br>`;
            statusDiv.innerHTML = offline;
        };

        socket.onmessage = msg => {
            let data = JSON.parse(msg.data);
            console.log("action is", data.action);
            switch (data.action) {
                case "broadcast":
                    o.innerHTML = o.innerHTML + data.message + "<br>";
                    break;
                case "alert":
                    notify(data.message, data.message_type);
                    break;
                case "entered":
                    console.log("entered!")
                    o.innerHTML = o.innerHTML + data.message + "<br>";
                    break;
                case "left":
                    o.innerHTML = o.innerHTML + data.message + "<br>";
                    break;
                case "list_users":
                    console.log("got list users push");
                    console.log(data);
                    let ul = document.getElementById("online_users");
                    while (ul.firstChild) ul.removeChild(ul.firstChild);

                    if (data.connected_users.length > 0) {
                        data.connected_users.forEach(function (item) {
                            console.log(item);
                            let li = document.createElement("li");
                            li.appendChild(document.createTextNode(item));
                            ul.appendChild(li)
                        })
                    }
                    break;
                default:
                    o.innerHTML = o.innerHTML + data.message + "<br>";
            }
        }
    })

    function sendMessage() {
        let jsonData = {};
        jsonData["action"] = "broadcast";
        let msg = document.getElementById("message");
        let user = document.getElementById("username");
        if ((msg.value !== "") && (user.value !== "")) {
            jsonData["username"] = document.getElementById("username").value;
            jsonData["message"] = document.getElementById("message").value;
            socket.send(JSON.stringify(jsonData));
            msg.value = "";
        } else {
            notify("You must specify a username & message!", "error");
        }
    }

    // handle posting alerts
    function notify(msg, msgType) {
        let stay = false;
        if (msgType === "error") {
            stay = true;
        }
        notie.alert({
            type: msgType,
            text: msg,
            stay: stay,
        })
    }

</script>

</body>
</html>